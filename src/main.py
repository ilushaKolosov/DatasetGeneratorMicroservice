import time
import schedule
from datetime import datetime
from typing import List, Dict, Any
import tqdm
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = Path(__file__).parent
parent_dir = current_dir.parent
if str(parent_dir) not in sys.path:
    sys.path.append(str(parent_dir))

from src.exchange_service import ExchangeService
from src.data_processor import DataProcessor
from src.data_storage import DataStorage
from src.models.data_models import MarketData
import src.config as config
from src.logger import get_logger

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = get_logger("main")


class DataCollector:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.exchange_service = ExchangeService()
        self.data_processor = DataProcessor()
        self.data_storage = DataStorage()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.symbols = config.SYMBOLS
        self.timeframes = config.TIMEFRAMES
        self.collection_interval = config.DATA_COLLECTION_INTERVAL
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        self.total_requests = len(self.symbols) * len(self.timeframes)
        
        logger.info(f"–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ {len(self.symbols)} —Å–∏–º–≤–æ–ª–∞–º –∏ {len(self.timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º")
    
    def collect_data(self) -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏, –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ {len(self.symbols)} —Å–∏–º–≤–æ–ª–∞–º –∏ {len(self.timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º")
            
            # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            total_pairs = len(self.symbols) * len(self.timeframes)
            progress_bar = tqdm.tqdm(total=total_pairs, desc="–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö", unit="–ø–∞—Ä—ã")
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            all_market_data = []
            
            for symbol in self.symbols:
                for timeframe in self.timeframes:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                    progress_bar.set_description(f"–°–±–æ—Ä {symbol} {timeframe}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}")
                    ohlcv_data = self.exchange_service.fetch_historical_ohlcv(
                        symbol=symbol,
                        timeframe=timeframe,
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                        since=None,
                        limit=1000
                    )
                    
                    if not ohlcv_data:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}")
                        progress_bar.update(1)  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        continue
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    market_data_list = self.data_processor.process_ohlcv_with_indicators(ohlcv_data)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
                    all_market_data.extend(market_data_list)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    progress_bar.update(1)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                    total_records = len(all_market_data)
                    progress_percent = (progress_bar.n / progress_bar.total) * 100
                    estimated_total = int(total_records / (progress_percent / 100) if progress_percent > 0 else 0)
                    
                    print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent:.1f}% | –°–æ–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_records} | "
                          f"–û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: ~{estimated_total} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    time.sleep(1)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞–∫–∞–Ω –¥–ª—è —Å–∏–º–≤–æ–ª–∞
                orderbook = self.exchange_service.fetch_orderbook(symbol)
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Å—Ç–∞–∫–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                if orderbook:
                    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                    for timeframe in self.timeframes:
                        for i in range(len(all_market_data) - 1, -1, -1):
                            if all_market_data[i].ohlcv.symbol == symbol and all_market_data[i].ohlcv.timeframe == timeframe:
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–∫–∞–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                                all_market_data[i].order_book_snapshot = orderbook
                                break
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress_bar.close()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if all_market_data:
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(all_market_data)} –∑–∞–ø–∏—Å–µ–π –≤ CSV")
                print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(all_market_data)} –∑–∞–ø–∏—Å–µ–π –≤ CSV —Ñ–∞–π–ª {config.DATASET_PATH}")
                success = self.data_storage.append_to_dataset(all_market_data)
                if success:
                    logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                    print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                else:
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                    return False
            else:
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return False
            
            logger.info(f"–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º —Å–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("–ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        total_requests = len(self.symbols) * len(self.timeframes)
        estimated_time_minutes = total_requests * 1.5  # ~1.5 –º–∏–Ω—É—Ç—ã –Ω–∞ –ø–∞—Ä—É/—Ç–∞–π–º—Ñ—Ä–µ–π–º
        print(f"–û—Ü–µ–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: ~{estimated_time_minutes:.1f} –º–∏–Ω—É—Ç")
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: ~{total_requests * 350} –∑–∞–ø–∏—Å–µ–π")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        self.collect_data()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        interval_minutes = self.collection_interval // 60
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω—É—Ç")
        print(f"‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω—É—Ç")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ schedule
        schedule.every(interval_minutes).minutes.do(self.collect_data)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        logger.info("–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        print("üîÑ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        while True:
            schedule.run_pending()
            time.sleep(1)


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    collector = DataCollector()
    collector.start()